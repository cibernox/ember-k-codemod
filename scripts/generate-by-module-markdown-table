#!/usr/bin/env node

const chalk = require("chalk");
const green = chalk.green;
const blue = chalk.blue;
const mapping = require("../config/mapping");
const reserved = require("../config/reserved");

function normalize(key) {
  let row = mapping[key];

  return {
    before: key,
    row: row,
    group: row[0].split("/", 2).join("/")
  }
}

function sortByGroup(a, b) {
  return (a.group < b.group) ? -1 :
         ((a.group > b.group) ? 1 :
         0);
}

function tableRow(before, row) {
  let [afterPackage, afterExportName, afterIdentifier] = row;

  // For default exports, assume the identifier remains the same as the global
  // version if an explicit name isn't provided.
  if (!afterIdentifier) {
    afterIdentifier = before;
  }

  // Object, Array, etc.
  if (reserved.includes(afterIdentifier)) {
    afterIdentifier = "Ember" + afterIdentifier;
  }

  if (afterExportName) {
    after = `import { ${afterExportName} } from "${afterPackage}"`;
  } else {
    after = `import ${afterIdentifier} from "${afterPackage}"`;
  }

  before = code("Ember." + before);
  after = code(after);

  return [before, after];
}

function buildTable(result, row) {
  let group = result[row.group] = result[row.group] || {
    maxBefore: 0,
    maxAfter: 0,
    rows: []
  };

  let [before, after] = tableRow(row.before, row.row);

  group.maxBefore = Math.max(group.maxBefore, before.length);
  group.maxAfter = Math.max(group.maxAfter, after.length);

  return group.rows.push([before, after, row.row]), result;
}

function cmp(a, b) {
  return (a > b) ? 1 : (a < b) ? -1 : 0;
}

function sortByPackageAndExport([,,a], [,,b]) {
  if (a[0] === b[0]) {
    return cmp(a[1] || "", b[1] || "");
  }

  return cmp(a[0], b[0]);
}

function printTable(table) {
  Object.keys(table).map(name => {
    print("### " + code(name));

    let group = table[name];
    let rows = group.rows;

    rows = rows.sort(sortByPackageAndExport);

    rows.unshift(["---", "---"]);
    rows.unshift(["Global", "Module"]);
    rows.map(([before, after]) => {
      print(`|${pad(after, group.maxAfter)}|${pad(before, group.maxBefore)}|`);
    });

    print();
  });
}

function code(str) {
  return "`" + str + "`";
}

function pad(str, max) {
  let extra = " ".repeat(max - str.length);
  return ` ${str}${extra} `;
}

function print() {
  console.log.apply(console, arguments);
}

let table = Object.keys(mapping)
  .map(normalize)
  .sort(sortByGroup)
  .reduce(buildTable, {});

printTable(table);