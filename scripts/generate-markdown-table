#!/usr/bin/env node

let mapping = require("../config/mapping");
let reserved = require("../config/reserved");

let maxBefore = 0;
let maxAfter = 0;

let rows = Object.keys(mapping).sort().map(before => {
  let after;
  let [afterPackage, afterExportName, afterIdentifier] = mapping[before];

  // For default exports, assume the identifier remains the same as the global
  // version if an explicit name isn't provided.
  if (!afterIdentifier) {
    afterIdentifier = before;
  }

  // Object, Array, etc.
  if (reserved.includes(afterIdentifier)) {
    afterIdentifier = "Ember" + afterIdentifier;
  }

  if (afterExportName) {
    after = `import { ${afterExportName} } from "${afterPackage}"`;
  } else {
    after = `import ${afterIdentifier} from "${afterPackage}"`;
  }

  before = code("Ember." + before);
  after = code(after);

  maxBefore = Math.max(maxBefore, before.length);
  maxAfter = Math.max(maxAfter, after.length);

  return [before, after];
});

// Add headers to beginning of array
rows.unshift(["---", "---"]);
rows.unshift(["Before", "After"]);

rows = rows.map(([before, after]) => {
  console.log(`|${pad(before, maxBefore)}|${pad(after, maxAfter)}|`);
});

function code(str) {
  return "`" + str + "`";
}

function pad(str, max) {
  let extra = " ".repeat(max - str.length);
  return ` ${str}${extra} `;
}